//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace AcFunVideo
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace AcFunVideo.AcFunVideo_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[45];
            _typeNameTable[0] = "AcFunVideo.AboutPage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "AcFunVideo.View.NormalDetailView";
            _typeNameTable[4] = "AcFunVideo.View.NormalView";
            _typeNameTable[5] = "AcFunVideo.View.Icon";
            _typeNameTable[6] = "AcFunVideo.View.CategoryBanner";
            _typeNameTable[7] = "AcFunVideo.CategoryPage";
            _typeNameTable[8] = "AcFunVideo.SliderValueConverter";
            _typeNameTable[9] = "Object";
            _typeNameTable[10] = "AcFunVideo.View.VideoSinglePartView";
            _typeNameTable[11] = "Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl";
            _typeNameTable[12] = "Microsoft.Graphics.Canvas.CanvasDevice";
            _typeNameTable[13] = "Single";
            _typeNameTable[14] = "Boolean";
            _typeNameTable[15] = "TimeSpan";
            _typeNameTable[16] = "System.ValueType";
            _typeNameTable[17] = "Windows.UI.Color";
            _typeNameTable[18] = "Windows.Foundation.Size";
            _typeNameTable[19] = "AcFunVideo.DetailsPage";
            _typeNameTable[20] = "AcFunVideo.DownloadPage";
            _typeNameTable[21] = "AcFunVideo.View.CategoryIcon";
            _typeNameTable[22] = "Windows.UI.Xaml.Controls.Image";
            _typeNameTable[23] = "Windows.UI.Xaml.Controls.Grid";
            _typeNameTable[24] = "Windows.UI.Xaml.Controls.TextBlock";
            _typeNameTable[25] = "AcFunVideo.View.CartoonView";
            _typeNameTable[26] = "AcFunVideo.MainPage";
            _typeNameTable[27] = "AcFunVideo.PCPage.PCMainPage";
            _typeNameTable[28] = "AcFunVideo.RankPage";
            _typeNameTable[29] = "AcFunVideo.View.UnderLineSwitchButton";
            _typeNameTable[30] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[31] = "Int32";
            _typeNameTable[32] = "AcFunVideo.SinglePartPage";
            _typeNameTable[33] = "AcFunVideo.View.BannerView";
            _typeNameTable[34] = "AcFunVideo.Model.AcContent";
            _typeNameTable[35] = "AcFunVideo.View.CartoonSelectionView";
            _typeNameTable[36] = "AcFunVideo.View.CategoryIconButton";
            _typeNameTable[37] = "AcFunVideo.View.DownlaodView";
            _typeNameTable[38] = "AcFunVideo.View.FDImgBox";
            _typeNameTable[39] = "Windows.UI.Xaml.Media.Stretch";
            _typeNameTable[40] = "System.Uri";
            _typeNameTable[41] = "AcFunVideo.View.NormalCommentView";
            _typeNameTable[42] = "AcFunVideo.View.RefCommentView";
            _typeNameTable[43] = "AcFunVideo.Model.commentContent";
            _typeNameTable[44] = "AcFunVideo.View.UnderLineButton";

            _typeTable = new global::System.Type[45];
            _typeTable[0] = typeof(global::AcFunVideo.AboutPage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::AcFunVideo.View.NormalDetailView);
            _typeTable[4] = typeof(global::AcFunVideo.View.NormalView);
            _typeTable[5] = typeof(global::AcFunVideo.View.Icon);
            _typeTable[6] = typeof(global::AcFunVideo.View.CategoryBanner);
            _typeTable[7] = typeof(global::AcFunVideo.CategoryPage);
            _typeTable[8] = typeof(global::AcFunVideo.SliderValueConverter);
            _typeTable[9] = typeof(global::System.Object);
            _typeTable[10] = typeof(global::AcFunVideo.View.VideoSinglePartView);
            _typeTable[11] = typeof(global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl);
            _typeTable[12] = typeof(global::Microsoft.Graphics.Canvas.CanvasDevice);
            _typeTable[13] = typeof(global::System.Single);
            _typeTable[14] = typeof(global::System.Boolean);
            _typeTable[15] = typeof(global::System.TimeSpan);
            _typeTable[16] = typeof(global::System.ValueType);
            _typeTable[17] = typeof(global::Windows.UI.Color);
            _typeTable[18] = typeof(global::Windows.Foundation.Size);
            _typeTable[19] = typeof(global::AcFunVideo.DetailsPage);
            _typeTable[20] = typeof(global::AcFunVideo.DownloadPage);
            _typeTable[21] = typeof(global::AcFunVideo.View.CategoryIcon);
            _typeTable[22] = typeof(global::Windows.UI.Xaml.Controls.Image);
            _typeTable[23] = typeof(global::Windows.UI.Xaml.Controls.Grid);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Controls.TextBlock);
            _typeTable[25] = typeof(global::AcFunVideo.View.CartoonView);
            _typeTable[26] = typeof(global::AcFunVideo.MainPage);
            _typeTable[27] = typeof(global::AcFunVideo.PCPage.PCMainPage);
            _typeTable[28] = typeof(global::AcFunVideo.RankPage);
            _typeTable[29] = typeof(global::AcFunVideo.View.UnderLineSwitchButton);
            _typeTable[30] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[31] = typeof(global::System.Int32);
            _typeTable[32] = typeof(global::AcFunVideo.SinglePartPage);
            _typeTable[33] = typeof(global::AcFunVideo.View.BannerView);
            _typeTable[34] = typeof(global::AcFunVideo.Model.AcContent);
            _typeTable[35] = typeof(global::AcFunVideo.View.CartoonSelectionView);
            _typeTable[36] = typeof(global::AcFunVideo.View.CategoryIconButton);
            _typeTable[37] = typeof(global::AcFunVideo.View.DownlaodView);
            _typeTable[38] = typeof(global::AcFunVideo.View.FDImgBox);
            _typeTable[39] = typeof(global::Windows.UI.Xaml.Media.Stretch);
            _typeTable[40] = typeof(global::System.Uri);
            _typeTable[41] = typeof(global::AcFunVideo.View.NormalCommentView);
            _typeTable[42] = typeof(global::AcFunVideo.View.RefCommentView);
            _typeTable[43] = typeof(global::AcFunVideo.Model.commentContent);
            _typeTable[44] = typeof(global::AcFunVideo.View.UnderLineButton);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_AboutPage() { return new global::AcFunVideo.AboutPage(); }
        private object Activate_3_NormalDetailView() { return new global::AcFunVideo.View.NormalDetailView(); }
        private object Activate_4_NormalView() { return new global::AcFunVideo.View.NormalView(); }
        private object Activate_5_Icon() { return new global::AcFunVideo.View.Icon(); }
        private object Activate_6_CategoryBanner() { return new global::AcFunVideo.View.CategoryBanner(); }
        private object Activate_7_CategoryPage() { return new global::AcFunVideo.CategoryPage(); }
        private object Activate_8_SliderValueConverter() { return new global::AcFunVideo.SliderValueConverter(); }
        private object Activate_10_VideoSinglePartView() { return new global::AcFunVideo.View.VideoSinglePartView(); }
        private object Activate_11_CanvasAnimatedControl() { return new global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl(); }
        private object Activate_12_CanvasDevice() { return new global::Microsoft.Graphics.Canvas.CanvasDevice(); }
        private object Activate_19_DetailsPage() { return new global::AcFunVideo.DetailsPage(); }
        private object Activate_20_DownloadPage() { return new global::AcFunVideo.DownloadPage(); }
        private object Activate_21_CategoryIcon() { return new global::AcFunVideo.View.CategoryIcon(); }
        private object Activate_25_CartoonView() { return new global::AcFunVideo.View.CartoonView(); }
        private object Activate_26_MainPage() { return new global::AcFunVideo.MainPage(); }
        private object Activate_27_PCMainPage() { return new global::AcFunVideo.PCPage.PCMainPage(); }
        private object Activate_28_RankPage() { return new global::AcFunVideo.RankPage(); }
        private object Activate_29_UnderLineSwitchButton() { return new global::AcFunVideo.View.UnderLineSwitchButton(); }
        private object Activate_32_SinglePartPage() { return new global::AcFunVideo.SinglePartPage(); }
        private object Activate_33_BannerView() { return new global::AcFunVideo.View.BannerView(); }
        private object Activate_34_AcContent() { return new global::AcFunVideo.Model.AcContent(); }
        private object Activate_35_CartoonSelectionView() { return new global::AcFunVideo.View.CartoonSelectionView(); }
        private object Activate_36_CategoryIconButton() { return new global::AcFunVideo.View.CategoryIconButton(); }
        private object Activate_37_DownlaodView() { return new global::AcFunVideo.View.DownlaodView(); }
        private object Activate_38_FDImgBox() { return new global::AcFunVideo.View.FDImgBox(); }
        private object Activate_41_NormalCommentView() { return new global::AcFunVideo.View.NormalCommentView(); }
        private object Activate_42_RefCommentView() { return new global::AcFunVideo.View.RefCommentView(); }
        private object Activate_43_commentContent() { return new global::AcFunVideo.Model.commentContent(); }
        private object Activate_44_UnderLineButton() { return new global::AcFunVideo.View.UnderLineButton(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  AcFunVideo.AboutPage
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_AboutPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  AcFunVideo.View.NormalDetailView
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_3_NormalDetailView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  AcFunVideo.View.NormalView
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_4_NormalView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  AcFunVideo.View.Icon
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_5_Icon;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  AcFunVideo.View.CategoryBanner
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_6_CategoryBanner;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  AcFunVideo.CategoryPage
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_7_CategoryPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  AcFunVideo.SliderValueConverter
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_SliderValueConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  Object
                xamlType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  AcFunVideo.View.VideoSinglePartView
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_10_VideoSinglePartView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_11_CanvasAnimatedControl;
                userType.AddMemberName("Device");
                userType.AddMemberName("Dpi");
                userType.AddMemberName("UseSharedDevice");
                userType.AddMemberName("TargetElapsedTime");
                userType.AddMemberName("Paused");
                userType.AddMemberName("IsFixedTimeStep");
                userType.AddMemberName("ForceSoftwareRenderer");
                userType.AddMemberName("DpiScale");
                userType.AddMemberName("CustomDevice");
                userType.AddMemberName("ClearColor");
                userType.AddMemberName("HasGameLoopThreadAccess");
                userType.AddMemberName("ReadyToDraw");
                userType.AddMemberName("Size");
                xamlType = userType;
                break;

            case 12:   //  Microsoft.Graphics.Canvas.CanvasDevice
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 13:   //  Single
                xamlType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Boolean
                xamlType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  TimeSpan
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  System.ValueType
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Color
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  Windows.Foundation.Size
                xamlType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  AcFunVideo.DetailsPage
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_19_DetailsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  AcFunVideo.DownloadPage
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_DownloadPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  AcFunVideo.View.CategoryIcon
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_21_CategoryIcon;
                userType.AddMemberName("IMG");
                userType.AddMemberName("RootGrid");
                userType.AddMemberName("Title");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Windows.UI.Xaml.Controls.Image
                xamlType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Windows.UI.Xaml.Controls.Grid
                xamlType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  Windows.UI.Xaml.Controls.TextBlock
                xamlType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  AcFunVideo.View.CartoonView
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_25_CartoonView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  AcFunVideo.MainPage
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_26_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  AcFunVideo.PCPage.PCMainPage
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_PCMainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  AcFunVideo.RankPage
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_28_RankPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  AcFunVideo.View.UnderLineSwitchButton
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_29_UnderLineSwitchButton;
                userType.AddMemberName("TextColor");
                userType.AddMemberName("UnderLineColor");
                userType.AddMemberName("SelectColor");
                userType.AddMemberName("UnSelectColor");
                userType.AddMemberName("SelectIndex");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  Int32
                xamlType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  AcFunVideo.SinglePartPage
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_SinglePartPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  AcFunVideo.View.BannerView
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_33_BannerView;
                userType.AddMemberName("items");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  AcFunVideo.Model.AcContent
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  AcFunVideo.View.CartoonSelectionView
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_35_CartoonSelectionView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  AcFunVideo.View.CategoryIconButton
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_36_CategoryIconButton;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  AcFunVideo.View.DownlaodView
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_37_DownlaodView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  AcFunVideo.View.FDImgBox
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_38_FDImgBox;
                userType.AddMemberName("Stretch");
                userType.AddMemberName("UriSource");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  Windows.UI.Xaml.Media.Stretch
                xamlType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 40:   //  System.Uri
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  AcFunVideo.View.NormalCommentView
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_41_NormalCommentView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  AcFunVideo.View.RefCommentView
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_42_RefCommentView;
                userType.AddMemberName("items");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  AcFunVideo.Model.commentContent
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  AcFunVideo.View.UnderLineButton
                userType = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_44_UnderLineButton;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_CanvasAnimatedControl_Device(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            return that.Device;
        }
        private object get_1_CanvasAnimatedControl_Dpi(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            return that.Dpi;
        }
        private object get_2_CanvasAnimatedControl_UseSharedDevice(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            return that.UseSharedDevice;
        }
        private void set_2_CanvasAnimatedControl_UseSharedDevice(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            that.UseSharedDevice = (global::System.Boolean)Value;
        }
        private object get_3_CanvasAnimatedControl_TargetElapsedTime(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            return that.TargetElapsedTime;
        }
        private void set_3_CanvasAnimatedControl_TargetElapsedTime(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            that.TargetElapsedTime = (global::System.TimeSpan)Value;
        }
        private object get_4_CanvasAnimatedControl_Paused(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            return that.Paused;
        }
        private void set_4_CanvasAnimatedControl_Paused(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            that.Paused = (global::System.Boolean)Value;
        }
        private object get_5_CanvasAnimatedControl_IsFixedTimeStep(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            return that.IsFixedTimeStep;
        }
        private void set_5_CanvasAnimatedControl_IsFixedTimeStep(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            that.IsFixedTimeStep = (global::System.Boolean)Value;
        }
        private object get_6_CanvasAnimatedControl_ForceSoftwareRenderer(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            return that.ForceSoftwareRenderer;
        }
        private void set_6_CanvasAnimatedControl_ForceSoftwareRenderer(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            that.ForceSoftwareRenderer = (global::System.Boolean)Value;
        }
        private object get_7_CanvasAnimatedControl_DpiScale(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            return that.DpiScale;
        }
        private void set_7_CanvasAnimatedControl_DpiScale(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            that.DpiScale = (global::System.Single)Value;
        }
        private object get_8_CanvasAnimatedControl_CustomDevice(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            return that.CustomDevice;
        }
        private void set_8_CanvasAnimatedControl_CustomDevice(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            that.CustomDevice = (global::Microsoft.Graphics.Canvas.CanvasDevice)Value;
        }
        private object get_9_CanvasAnimatedControl_ClearColor(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            return that.ClearColor;
        }
        private void set_9_CanvasAnimatedControl_ClearColor(object instance, object Value)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            that.ClearColor = (global::Windows.UI.Color)Value;
        }
        private object get_10_CanvasAnimatedControl_HasGameLoopThreadAccess(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            return that.HasGameLoopThreadAccess;
        }
        private object get_11_CanvasAnimatedControl_ReadyToDraw(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            return that.ReadyToDraw;
        }
        private object get_12_CanvasAnimatedControl_Size(object instance)
        {
            var that = (global::Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl)instance;
            return that.Size;
        }
        private object get_13_CategoryIcon_IMG(object instance)
        {
            var that = (global::AcFunVideo.View.CategoryIcon)instance;
            return that.IMG;
        }
        private void set_13_CategoryIcon_IMG(object instance, object Value)
        {
            var that = (global::AcFunVideo.View.CategoryIcon)instance;
            that.IMG = (global::Windows.UI.Xaml.Controls.Image)Value;
        }
        private object get_14_CategoryIcon_RootGrid(object instance)
        {
            var that = (global::AcFunVideo.View.CategoryIcon)instance;
            return that.RootGrid;
        }
        private void set_14_CategoryIcon_RootGrid(object instance, object Value)
        {
            var that = (global::AcFunVideo.View.CategoryIcon)instance;
            that.RootGrid = (global::Windows.UI.Xaml.Controls.Grid)Value;
        }
        private object get_15_CategoryIcon_Title(object instance)
        {
            var that = (global::AcFunVideo.View.CategoryIcon)instance;
            return that.Title;
        }
        private void set_15_CategoryIcon_Title(object instance, object Value)
        {
            var that = (global::AcFunVideo.View.CategoryIcon)instance;
            that.Title = (global::Windows.UI.Xaml.Controls.TextBlock)Value;
        }
        private object get_16_UnderLineSwitchButton_TextColor(object instance)
        {
            var that = (global::AcFunVideo.View.UnderLineSwitchButton)instance;
            return that.TextColor;
        }
        private void set_16_UnderLineSwitchButton_TextColor(object instance, object Value)
        {
            var that = (global::AcFunVideo.View.UnderLineSwitchButton)instance;
            that.TextColor = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_17_UnderLineSwitchButton_UnderLineColor(object instance)
        {
            var that = (global::AcFunVideo.View.UnderLineSwitchButton)instance;
            return that.UnderLineColor;
        }
        private void set_17_UnderLineSwitchButton_UnderLineColor(object instance, object Value)
        {
            var that = (global::AcFunVideo.View.UnderLineSwitchButton)instance;
            that.UnderLineColor = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_18_UnderLineSwitchButton_SelectColor(object instance)
        {
            var that = (global::AcFunVideo.View.UnderLineSwitchButton)instance;
            return that.SelectColor;
        }
        private void set_18_UnderLineSwitchButton_SelectColor(object instance, object Value)
        {
            var that = (global::AcFunVideo.View.UnderLineSwitchButton)instance;
            that.SelectColor = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_19_UnderLineSwitchButton_UnSelectColor(object instance)
        {
            var that = (global::AcFunVideo.View.UnderLineSwitchButton)instance;
            return that.UnSelectColor;
        }
        private void set_19_UnderLineSwitchButton_UnSelectColor(object instance, object Value)
        {
            var that = (global::AcFunVideo.View.UnderLineSwitchButton)instance;
            that.UnSelectColor = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_20_UnderLineSwitchButton_SelectIndex(object instance)
        {
            var that = (global::AcFunVideo.View.UnderLineSwitchButton)instance;
            return that.SelectIndex;
        }
        private void set_20_UnderLineSwitchButton_SelectIndex(object instance, object Value)
        {
            var that = (global::AcFunVideo.View.UnderLineSwitchButton)instance;
            that.SelectIndex = (global::System.Int32)Value;
        }
        private object get_21_BannerView_items(object instance)
        {
            var that = (global::AcFunVideo.View.BannerView)instance;
            return that.items;
        }
        private void set_21_BannerView_items(object instance, object Value)
        {
            var that = (global::AcFunVideo.View.BannerView)instance;
            that.items = (global::AcFunVideo.Model.AcContent)Value;
        }
        private object get_22_FDImgBox_Stretch(object instance)
        {
            var that = (global::AcFunVideo.View.FDImgBox)instance;
            return that.Stretch;
        }
        private void set_22_FDImgBox_Stretch(object instance, object Value)
        {
            var that = (global::AcFunVideo.View.FDImgBox)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_23_FDImgBox_UriSource(object instance)
        {
            var that = (global::AcFunVideo.View.FDImgBox)instance;
            return that.UriSource;
        }
        private void set_23_FDImgBox_UriSource(object instance, object Value)
        {
            var that = (global::AcFunVideo.View.FDImgBox)instance;
            that.UriSource = (global::System.Uri)Value;
        }
        private object get_24_RefCommentView_items(object instance)
        {
            var that = (global::AcFunVideo.View.RefCommentView)instance;
            return that.items;
        }
        private void set_24_RefCommentView_items(object instance, object Value)
        {
            var that = (global::AcFunVideo.View.RefCommentView)instance;
            that.items = (global::AcFunVideo.Model.commentContent)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember xamlMember = null;
            global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl.Device":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "Device", "Microsoft.Graphics.Canvas.CanvasDevice");
                xamlMember.Getter = get_0_CanvasAnimatedControl_Device;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl.Dpi":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "Dpi", "Single");
                xamlMember.Getter = get_1_CanvasAnimatedControl_Dpi;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl.UseSharedDevice":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "UseSharedDevice", "Boolean");
                xamlMember.Getter = get_2_CanvasAnimatedControl_UseSharedDevice;
                xamlMember.Setter = set_2_CanvasAnimatedControl_UseSharedDevice;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl.TargetElapsedTime":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "TargetElapsedTime", "TimeSpan");
                xamlMember.Getter = get_3_CanvasAnimatedControl_TargetElapsedTime;
                xamlMember.Setter = set_3_CanvasAnimatedControl_TargetElapsedTime;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl.Paused":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "Paused", "Boolean");
                xamlMember.Getter = get_4_CanvasAnimatedControl_Paused;
                xamlMember.Setter = set_4_CanvasAnimatedControl_Paused;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl.IsFixedTimeStep":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "IsFixedTimeStep", "Boolean");
                xamlMember.Getter = get_5_CanvasAnimatedControl_IsFixedTimeStep;
                xamlMember.Setter = set_5_CanvasAnimatedControl_IsFixedTimeStep;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl.ForceSoftwareRenderer":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "ForceSoftwareRenderer", "Boolean");
                xamlMember.Getter = get_6_CanvasAnimatedControl_ForceSoftwareRenderer;
                xamlMember.Setter = set_6_CanvasAnimatedControl_ForceSoftwareRenderer;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl.DpiScale":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "DpiScale", "Single");
                xamlMember.Getter = get_7_CanvasAnimatedControl_DpiScale;
                xamlMember.Setter = set_7_CanvasAnimatedControl_DpiScale;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl.CustomDevice":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "CustomDevice", "Microsoft.Graphics.Canvas.CanvasDevice");
                xamlMember.Getter = get_8_CanvasAnimatedControl_CustomDevice;
                xamlMember.Setter = set_8_CanvasAnimatedControl_CustomDevice;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl.ClearColor":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "ClearColor", "Windows.UI.Color");
                xamlMember.Getter = get_9_CanvasAnimatedControl_ClearColor;
                xamlMember.Setter = set_9_CanvasAnimatedControl_ClearColor;
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl.HasGameLoopThreadAccess":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "HasGameLoopThreadAccess", "Boolean");
                xamlMember.Getter = get_10_CanvasAnimatedControl_HasGameLoopThreadAccess;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl.ReadyToDraw":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "ReadyToDraw", "Boolean");
                xamlMember.Getter = get_11_CanvasAnimatedControl_ReadyToDraw;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl.Size":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "Size", "Windows.Foundation.Size");
                xamlMember.Getter = get_12_CanvasAnimatedControl_Size;
                xamlMember.SetIsReadOnly();
                break;
            case "AcFunVideo.View.CategoryIcon.IMG":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AcFunVideo.View.CategoryIcon");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "IMG", "Windows.UI.Xaml.Controls.Image");
                xamlMember.Getter = get_13_CategoryIcon_IMG;
                xamlMember.Setter = set_13_CategoryIcon_IMG;
                break;
            case "AcFunVideo.View.CategoryIcon.RootGrid":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AcFunVideo.View.CategoryIcon");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "RootGrid", "Windows.UI.Xaml.Controls.Grid");
                xamlMember.Getter = get_14_CategoryIcon_RootGrid;
                xamlMember.Setter = set_14_CategoryIcon_RootGrid;
                break;
            case "AcFunVideo.View.CategoryIcon.Title":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AcFunVideo.View.CategoryIcon");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "Title", "Windows.UI.Xaml.Controls.TextBlock");
                xamlMember.Getter = get_15_CategoryIcon_Title;
                xamlMember.Setter = set_15_CategoryIcon_Title;
                break;
            case "AcFunVideo.View.UnderLineSwitchButton.TextColor":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AcFunVideo.View.UnderLineSwitchButton");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "TextColor", "Windows.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_16_UnderLineSwitchButton_TextColor;
                xamlMember.Setter = set_16_UnderLineSwitchButton_TextColor;
                break;
            case "AcFunVideo.View.UnderLineSwitchButton.UnderLineColor":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AcFunVideo.View.UnderLineSwitchButton");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "UnderLineColor", "Windows.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_17_UnderLineSwitchButton_UnderLineColor;
                xamlMember.Setter = set_17_UnderLineSwitchButton_UnderLineColor;
                break;
            case "AcFunVideo.View.UnderLineSwitchButton.SelectColor":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AcFunVideo.View.UnderLineSwitchButton");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "SelectColor", "Windows.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_18_UnderLineSwitchButton_SelectColor;
                xamlMember.Setter = set_18_UnderLineSwitchButton_SelectColor;
                break;
            case "AcFunVideo.View.UnderLineSwitchButton.UnSelectColor":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AcFunVideo.View.UnderLineSwitchButton");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "UnSelectColor", "Windows.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_19_UnderLineSwitchButton_UnSelectColor;
                xamlMember.Setter = set_19_UnderLineSwitchButton_UnSelectColor;
                break;
            case "AcFunVideo.View.UnderLineSwitchButton.SelectIndex":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AcFunVideo.View.UnderLineSwitchButton");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "SelectIndex", "Int32");
                xamlMember.Getter = get_20_UnderLineSwitchButton_SelectIndex;
                xamlMember.Setter = set_20_UnderLineSwitchButton_SelectIndex;
                break;
            case "AcFunVideo.View.BannerView.items":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AcFunVideo.View.BannerView");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "items", "AcFunVideo.Model.AcContent");
                xamlMember.Getter = get_21_BannerView_items;
                xamlMember.Setter = set_21_BannerView_items;
                break;
            case "AcFunVideo.View.FDImgBox.Stretch":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AcFunVideo.View.FDImgBox");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_FDImgBox_Stretch;
                xamlMember.Setter = set_22_FDImgBox_Stretch;
                break;
            case "AcFunVideo.View.FDImgBox.UriSource":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AcFunVideo.View.FDImgBox");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "UriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_FDImgBox_UriSource;
                xamlMember.Setter = set_23_FDImgBox_UriSource;
                break;
            case "AcFunVideo.View.RefCommentView.items":
                userType = (global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AcFunVideo.View.RefCommentView");
                xamlMember = new global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlMember(this, "items", "AcFunVideo.Model.commentContent");
                xamlMember.Getter = get_24_RefCommentView_items;
                xamlMember.Setter = set_24_RefCommentView_items;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlSystemBaseType
    {
        global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::AcFunVideo.AcFunVideo_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

